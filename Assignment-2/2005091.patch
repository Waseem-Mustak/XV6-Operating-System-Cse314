diff --git a/Makefile b/Makefile
index 62fd0f8..c4dae69 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_load\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..9fa813e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -686,3 +686,37 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+//task 2
+uint64
+sys_info() 
+{
+  struct procInfo pInfo;
+  struct proc p;
+  int activeProcesses=0;
+  int memsize=0;  
+  int totalProcesses=NPROC;
+  int totalMemSize=PHYSTOP-KERNBASE; 
+
+  for(int i=0;i<NPROC;i++)
+  {
+    p=proc[i];
+    if(p.state==RUNNING||p.state==RUNNABLE||p.state==SLEEPING){
+        activeProcesses++;
+        memsize+=p.sz;  
+    }
+  }
+
+  pInfo.activeProcess=activeProcesses;
+  pInfo.totalProcess=totalProcesses;
+  pInfo.memsize=memsize;
+  pInfo.totalMemSize=totalMemSize;
+
+  uint64 addressOfStructure;
+  argaddr(0,&addressOfStructure);
+  
+  copyout(myproc()->pagetable,(uint64)addressOfStructure,(char*)&pInfo,sizeof(pInfo));
+
+  return 0;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..e1f8976 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  
+  int systemCallNumber;        // added by zisan
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ccc92ed 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_info(void);
+extern uint64 sys_setlastcmd(void);
+extern uint64 sys_getlastcmd(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +130,194 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_info]    sys_info,
+[SYS_setlastcmd] sys_setlastcmd,
+[SYS_getlastcmd] sys_getlastcmd,
 };
 
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
   num = p->trapframe->a7;
+
+  /////////////////////////////
+  int systemCallNumber=p->systemCallNumber;
+  if(num==systemCallNumber)
+  {
+    switch(systemCallNumber) {
+        case 1:
+            printf("pid: %d, syscall: fork, args: (void),return: ",p->pid);
+            break;
+        case 2: 
+            {
+                int status;
+                argint(0,&status);
+                printf("pid: %d, syscall: exit, args: (%d), return: ", p->pid,status);
+            }
+            break;
+        case 3: 
+            {
+                uint64 status;
+                argaddr(0,&status);
+                printf("pid: %d, syscall: wait, args: (%p), return: ", p->pid,(void*)status);
+            }
+            break;
+        case 4:  
+            {
+                uint64 fds;
+                argaddr(0,&fds);
+                printf("pid: %d, syscall: pipe, args: (%p), return: ", p->pid,(void*)fds);
+            }
+            break;
+        case 5: 
+            {
+                int fd;
+                uint64 addr;
+                int size;
+                argint(0,&fd);
+                argaddr(1,&addr);
+                argint(2,&size);
+                printf("pid: %d, syscall: read, args: (%d,%p,%d), return: ",p->pid,fd,(void*)addr,size);
+            }
+            break;
+        case 6: 
+            {
+                int pid;
+                argint(0,&pid);
+                printf("pid: %d, syscall: kill, args: (pid: %d), return: ",p->pid,pid);
+            }
+            break;
+        case 7: 
+            {
+                char path[100];
+                uint64 argv;
+                argstr(0, path, sizeof(path));
+                argaddr(1, &argv);
+                printf("pid: %d, syscall: exec, args: (%s, %p), return: ", p->pid, path, (void*)argv);
+            }
+            break;
+        case 8: 
+            {
+                int fd;
+                argint(0,&fd);
+                uint64 add;
+                argaddr(1,&add);
+                printf("pid: %d, syscall: fstat, args: (%d, %p), return: ",p->pid,fd,(void*)add);
+            }
+            break;
+        case 9: 
+            {
+                char path[100];
+                argstr(0,path,sizeof(path));
+                printf("pid: %d, syscall: chdir, args: (%s), return: ",p->pid, path);
+            }
+            break;
+        case 10: 
+            {
+                int fd;
+                argint(0,&fd);
+                printf("pid: %d, syscall: dup, args: (%d), return: ", p->pid,fd);
+            }
+            break;
+        case 11:
+            printf("pid: %d, syscall: getpid, return: ",p->pid);
+            break;
+        case 12:
+            {
+                int increment;
+                argint(0, &increment);
+                printf("pid: %d, syscall: sbrk, args: (increment: %d), return: ",p->pid, increment);
+            }
+            break;
+        case 13: 
+            {
+                int duration;
+                argint(0, &duration);
+                printf("pid: %d, syscall: sleep, args: (duration: %d), return: ", p->pid, duration);
+            }
+            break;
+        case 14: 
+            printf("pid: %d, syscall: uptime, return: ", p->pid);
+            break;
+        case 15:  
+            {
+                char filename[100];
+                int mode;
+                argstr(0, filename, sizeof(filename));
+                argint(1, &mode);
+                printf("pid: %d, syscall: open, args: (%s, %d), return: ", p->pid, filename, mode);
+            }
+            break;
+        case 16:
+            {
+                int fd;
+                uint64 addr;
+                int size;
+                argint(0, &fd);
+                argaddr(1, &addr);
+                argint(2, &size);
+                printf("pid: %d, syscall: write, args: (%d,%p,%d), return: ", p->pid, fd, (void*)addr, size);
+            }
+            break;
+        case 17: 
+            {
+                char name[100];
+                short major, minor;
+                argstr(0, name, sizeof(name));
+                argint(1,(int*)&major);
+                argint(2,(int*)&minor);
+                printf("pid: %d, syscall: mknod, args: (%s, major: %d, minor: %d), return: ", p->pid, name, major, minor);
+            }
+            break;
+        case 18:
+            {
+                char name[100];
+                argstr(0, name, sizeof(name));
+                printf("pid: %d, syscall: unlink, args: (%s), return: ", p->pid, name);
+            }
+            break;
+        case 19: 
+            {
+                char old[100], new[100];
+                argstr(0, old, sizeof(old));
+                argstr(1, new, sizeof(new));
+                printf("pid: %d, syscall: link, args: (%s, %s), return: ", p->pid, old, new);
+            }
+            break;
+        case 20: 
+            {
+                char name[100];
+                argstr(0, name, sizeof(name));
+                printf("pid: %d, syscall: mkdir, args: (%s), return: ", p->pid, name);
+            }
+            break;
+        case 21: 
+            {
+                int fd;
+                argint(0, &fd);
+                printf("pid: %d, syscall: close, args: (%d), return: ", p->pid, fd);
+            }
+            break;
+        case 22:
+            {
+                int message;
+                argint(0, &message);
+                printf("pid: %d, syscall: hello, args: (%d), return: ", p->pid, message);
+            }
+            break;
+        default:
+            printf("Unknown syscall: %d",systemCallNumber);
+            break;
+    }
+  }
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if(num==systemCallNumber)printf("%lu\n",p->trapframe->a0);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7062468 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_info   23
+#define SYS_setlastcmd  24
+#define SYS_getlastcmd  25
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..da22678 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,9 +6,16 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
+
+
+
+
+
 uint64
 sys_exit(void)
 {
+  myproc()->systemCallNumber=0;
   int n;
   argint(0, &n);
   exit(n);
@@ -73,6 +80,7 @@ sys_sleep(void)
 uint64
 sys_kill(void)
 {
+  myproc()->systemCallNumber=0;
   int pid;
 
   argint(0, &pid);
@@ -91,3 +99,49 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+
+
+
+
+
+
+
+// task 1
+uint64 
+sys_trace()
+{
+  int in;
+  argint(0,&in);
+  myproc()->systemCallNumber=in;
+  return 0;
+}
+
+
+
+
+//task 3
+char lastcmd[128];
+struct spinlock lastcmdlock; 
+
+uint64
+sys_setlastcmd(void)
+{
+  char cmd[100];
+  argstr(0,cmd,100);
+  acquire(&lastcmdlock); 
+  safestrcpy(lastcmd,cmd,sizeof(lastcmd)); 
+  release(&lastcmdlock); 
+  return 0;
+}
+
+
+uint64
+sys_getlastcmd(void)
+{
+  uint64 user_buf;
+  argaddr(0,&user_buf);
+  copyout(myproc()->pagetable,user_buf,lastcmd,sizeof(lastcmd));
+  return 0;
+}
diff --git a/kernel/types.h b/kernel/types.h
index ee73164..7415829 100644
--- a/kernel/types.h
+++ b/kernel/types.h
@@ -8,3 +8,11 @@ typedef unsigned int  uint32;
 typedef unsigned long uint64;
 
 typedef uint64 pde_t;
+
+
+struct procInfo {
+    int activeProcess;    // # of processes in RUNNABLE and RUNNING state
+    int totalProcess;     // # of total possible processes
+    int memsize;          // Total memory allocated by active processes (in bytes)
+    int totalMemSize;     // Total available physical memory (in bytes)
+};
diff --git a/user/load.c b/user/load.c
new file mode 100644
index 0000000..728b751
--- /dev/null
+++ b/user/load.c
@@ -0,0 +1,52 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main(int argc,char **argv)
+{
+    if(argc!=3) 
+    {
+        printf("Usage:load <childCount> <allocationAmount>\n");
+        exit(0);
+    }
+
+    int childCount=atoi(argv[1]);
+    int allocationAmount=atoi(argv[2]);
+
+    printf("Parent going to sleep.\n");
+
+    for(int i=0;i<childCount;i++)
+    {
+        sleep(20);
+        int pid=fork();
+        if(pid==0) 
+        {
+            printf("Child is created.\n");
+            char *mem=malloc(allocationAmount);
+            if(mem==0)
+            {
+                printf("Malloc failed!\n");
+                exit(0);
+            }
+            printf("Child allocated %d bytes.\n", allocationAmount);
+            sleep(50);
+            free(mem); 
+            exit(0);
+        }
+    }
+
+    sleep(10); 
+
+    struct procInfo *pInfo;
+    pInfo=(struct procInfo*)malloc(sizeof(struct procInfo));
+
+    info(pInfo);
+    printf("Parent wake up.\n");
+    printf("Current system information:\n");
+    printf("Processes: %d/%d\n", pInfo->activeProcess, pInfo->totalProcess);
+    int tem=pInfo->memsize%(1024*1024);
+    tem*=100;
+    tem/=(1024*1024);
+    printf("RAM: %d.%d/%d (in MB)\n", pInfo->memsize/(1024*1024), tem,pInfo->totalMemSize/(1024*1024));
+    free(pInfo);
+    exit(0);
+}
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..3046435 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -158,15 +158,26 @@ main(void)
 
   // Read and run input commands.
   while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0]=='!'&&buf[1]=='!')
+    {
+      getlastcmd(buf);
+      printf("%s",buf);
+    }
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
       // Chdir must be called by the parent, not the child.
       buf[strlen(buf)-1] = 0;  // chop \n
       if(chdir(buf+3) < 0)
+      {
         fprintf(2, "cannot cd %s\n", buf+3);
+        setlastcmd(buf);
+      }
       continue;
     }
     if(fork1() == 0)
+    {
+      setlastcmd(buf);
       runcmd(parsecmd(buf));
+    }
     wait(0);
   }
   exit(0);
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..b40bac1
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,8 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main(int argc,char **argv)
+{
+    trace(atoi(argv[1]));
+    exec(argv[2], &argv[2]);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..3c7250e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int info(struct procInfo *pInfo);
+int setlastcmd(char *cmd); 
+int getlastcmd(char *buf); 
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..3fd10a2 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("info");
+entry("setlastcmd");
+entry("getlastcmd");
